# Author: Angel Jair Haro  
# Date: 01-22-2023

# Colorscheme import
general.import = [
  # "~/.config/alacritty/themes/gruvbox-material-alacritty.yml",
  "~/.config/alacritty/themes/hyper.toml",
  # "~/.your_path/colorscheme.yml"
]
# or you can drop your preferred colorscheme here but it looks nicer like an import

# Font configuration
[font]
size = 14

[font.normal]
family = "JetBrainsMono Nerd Font"
style = "Regular"

[font.bold]
family = "JetBrainsMono Nerd Font"
style = "Bold"

[font.italic]
family = "Hack Nerd Font"
style = "Italic"

[font.bold_italic]
family = "Hack Nerd Font"
style = "Bold Italic"

# Enable clickable URLs
[mouse]
# # Important if you are running vim/nvim/etc
hide_when_typing = true


# [mouse.hints]
# modifiers = "Control"

# Cursor stuff
[cursor]

[cursor.style]
shape = "Block" # - Beam |, Block ▇, Underline _
blinking = "On" # - Never,Off,On,Always

# Specifying a `duration` of `0` will disable the visual bell.
[bell]
# - Ease
# - EaseOut
# - EaseOutSine
# - EaseOutQuad
# - EaseOutCubic
# - EaseOutQuart
# - EaseOutQuint
# - EaseOutExpo
# - EaseOutCirc
# - Linear
animation = "Linear"
# duration = 100
duration = 0
color = "#222222" # Visual bell animation color.

[window]
# decorations = "transparent"
decorations = "None"      # None, Fullscreen, Borderless
opacity = 0.9
startup_mode = "Windowed" # SimpleFullscreen,Fullscreen,Maximized,Windowed
dynamic_title = true
dynamic_padding = false

[window.dimensions]
columns = 150
lines = 45
#
[window.position]
x = 2500
y = 700
#
[window.padding]
# x = 10
# y = 30
x = 0
y = 0

# Clipboard stuff
[terminal]
osc52 = "CopyPaste" # enable inbound outbound terminal

[selection]
# This string contains all characters that are used as separators for
# "semantic words" in Alacritty.
semantic_escape_chars = ",│`|:\"' ()[]{}<>\t"
# When set to `true`, selected text will be copied to the primary clipboard.
save_to_clipboard = true
#
# # Line indicator
[colors.line_indicator]
foreground = "#b59b9c" # Use a red foreground color
background = "#b59b9c" # Use a blue background color
#
[scrolling]
multiplier = 15 # Scrolling distance multiplier.


#
#
# # Live config reload (changes require restart)
# live_config_reload = true
#
# ## BELOW HERE YOU CAN IGNORE ##
#
# # Point size
# # size = 11.0
#
# # Offset is the extra space around each character. `offset.y` can be thought
# # of as modifying the line spacing, and `offset.x` as modifying the letter
# # spacing.
# # [font.offset]
# # x = 0
# # y = 0
#
# # Glyph offset determines the locations of the glyphs within their cells with
# # the default being at the bottom. Increasing `x` moves the glyph to the
# # right, increasing `y` moves the glyph upward.
# # [font.glyph_offset]
# # x = 0
# # y = 0
#
# # Use built-in font for box drawing characters.
# #
# # If `true`, Alacritty will use a custom built-in font for box drawing
# # characters (Unicode points 2500 - 259f).
# #
# # builtin_box_drawing = true
#
# # If `true`, bold text is drawn using the bright color variants.
# # draw_bold_text_with_bright_colors = false
#
# # Colors (Tomorrow Night)
# # [colors]
# # Default colors
# # [colors.primary]
# # background = "#1d1f21"
# # foreground = "#c5c8c6"
#
# # Bright and dim foreground colors
# #
# # The dimmed foreground color is calculated automatically if it is not
# # present. If the bright foreground color is not set, or
# # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
# # color will be used.
# # dim_foreground = "#828482"
# # bright_foreground = "#eaeaea"
#
# # Cursor colors
# #
# # Colors which should be used to draw the terminal cursor.
# #
# # Allowed values are CellForeground/CellBackground, which reference the
# # affected cell, or hexadecimal colors like #ff00ff.
# # [colors.cursor]
# # text = "CellBackground"
# # cursor = "CellForeground"
#
# # Vi mode cursor colors
# #
# # Colors for the cursor when the vi mode is active.
# #
# # Allowed values are CellForeground/CellBackground, which reference the
# # affected cell, or hexadecimal colors like #ff00ff.
# # [colors.vi_mode_cursor]
# # text = "CellBackground"
# # cursor = "CellForeground"
#
# # Search colors
# #
# # Colors used for the search bar and match highlighting.
# # [colors.search]
# # Allowed values are CellForeground/CellBackground, which reference the
# # affected cell, or hexadecimal colors like #ff00ff.
# # [colors.search.matches]
# # foreground = "#000000"
# # background = "#ffffff"
# # [colors.search.focused_match]
# # foreground = "#ffffff"
# # background = "#000000"
#
# # Keyboard hints
# # [colors.hints]
# # First character in the hint label
# #
# # Allowed values are CellForeground/CellBackground, which reference the
# # affected cell, or hexadecimal colors like #ff00ff.
# # [colors.hints.start]
# # foreground = "#1d1f21"
# # background = "#e9ff5e"
#
# # All characters after the first one in the hint label
# #
# # Allowed values are CellForeground/CellBackground, which reference the
# # affected cell, or hexadecimal colors like #ff00ff.
# # [colors.hints.end]
# # foreground = "#e9ff5e"
# # background = "#1d1f21"
#
# # Line indicator
# #
# # Color used for the indicator displaying the position in history during
# # search and vi mode.
# #
# # By default, these will use the opposing primary color.
# # [colors.line_indicator]
# # foreground = "None"
# # background = "None"
#
# # Footer bar
# #
# # Color used for the footer bar on the bottom, used by search regex input,
# # hyperlink URI preview, etc.
# #
# # [colors.footer_bar]
# # background = "#c5c8c6"
# # foreground = "#1d1f21"
#
# # Selection colors
# #
# # Colors which should be used to draw the selection area.
# #
# # Allowed values are CellForeground/CellBackground, which reference the
# # affected cell, or hexadecimal colors like #ff00ff.
# # [colors.selection]
# # text = "CellBackground"
# # background = "CellForeground"
#
# # Indexed Colors
# #
# # The indexed colors include all colors from 16 to 256.
# # When these are not set, they're filled with sensible defaults.
# #
# # Example:
# # indexed_colors = [
# #     { index = 16, color = "#ff00ff" }
# # ]
#
# # Transparent cell backgrounds
# #
# # Whether or not `window.opacity` applies to all cell backgrounds or only to
# # the default background. When set to `true` all cells will be transparent
# # regardless of their background color.
# # transparent_background_colors = false
#
# # [cursor]
# # Cursor style
# # [cursor.style]
# # Cursor shape
# #
# # Values for `shape`:
# #   - ▇ Block
# #   - _ Underline
# #   - | Beam
# # shape = "Block"
#
# # Cursor blinking state
# #
# # Values for `blinking`:
# #   - Never: Prevent the cursor from ever blinking
# #   - Off: Disable blinking by default
# #   - On: Enable blinking by default
# #   - Always: Force the cursor to always blink
# # blinking = "Off"
#
# # Vi mode cursor style
# #
# # If the vi mode cursor style is `None` or not specified, it will fall back to
# # the style of the active value of the normal cursor.
# #
# # See `cursor.style` for available options.
# # vi_mode_style = "None"
#
# # Cursor blinking interval in milliseconds.
# # blink_interval = 750
#
# # Time after which cursor stops blinking, in seconds.
# #
# # Specifying '0' will disable timeout for blinking.
# # blink_timeout = 5
#
# # If this is `true`, the cursor will be rendered as a hollow box when the
# # window is not focused.
# # unfocused_hollow = true
#
# # Thickness of the cursor relative to the cell width as floating point number
# # from `0.0` to `1.0`.
# # thickness = 0.15
#
# # Shell
# #
# # You can set `shell.program` to the path of your favorite shell, e.g.
# # `/bin/fish`. Entries in `shell.args` are passed unmodified as arguments to the
# # shell.
# #
# # Default:
# #   - (Linux/BSD/macOS) `$SHELL` or the user's login shell, if `$SHELL` is unset
# #   - (Windows) powershell
# # [shell]
# # program = "/usr/local/bin/fish"
# # args = ["--login"]
#
# # Startup directory
# #
# # Directory the shell is started in. If this is unset, or `None`, the working
# # directory of the parent process will be used.
# # working_directory = "None"
#
# # Send ESC (\x1b) before characters when alt is pressed.
# # alt_send_esc = true
#
# # Offer IPC using `alacritty msg` (unix only)
# # ipc_socket = true
#
# # Hints
# #
# # I did not know how to use
#
# # Key bindings
# #
# # Key bindings are specified as a list of objects. For example, this is the
# # default paste binding:
# #
# # [[key_bindings]]
# # key = "V"
# # mods = "Control|Shift"
# # action = "Paste"
# #
# # Each key binding will specify a:
# #
# # - `key`: Identifier of the key pressed
# #
# #    - A-Z
# #    - F1-F24
# #    - Key0-Key9
# #
# #    A full list with available key codes can be found here:
# #    https://docs.rs/winit/*/winit/event/enum.VirtualKeyCode.html#variants
# #
# #    Instead of using the name of the keys, the `key` field also supports using
# #    the scancode of the desired key. Scancodes have to be specified as a
# #    decimal number. This command will allow you to display the hex scancodes
# #    for certain keys:
# #
# #       `showkey --scancodes`.
# #
# # Then exactly one of:
# #
# # - `chars`: Send a byte sequence to the running application
# #
# #    The `chars` field writes the specified string to the terminal. This makes
# #    it possible to pass escape sequences. To find escape codes for bindings
# #    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
# #    of tmux. Note that applications use terminfo to map escape sequences back
# #    to keys. It is therefore required to update the terminfo when changing an
# #    escape sequence.
# #
# # - `action`: Execute a predefined action
# #
# #   - ToggleViMode
# #   - SearchForward
# #       Start searching toward the right of the search origin.
# #   - SearchBackward
# #       Start searching toward the left of the search origin.
# #   - Copy
# #   - Paste
# #   - IncreaseFontSize
# #   - DecreaseFontSize
# #   - ResetFontSize
# #   - ScrollPageUp
# #   - ScrollPageDown
# #   - ScrollHalfPageUp
# #   - ScrollHalfPageDown
# #   - ScrollLineUp
# #   - ScrollLineDown
# #   - ScrollToTop
# #   - ScrollToBottom
# #   - ClearHistory
# #       Remove the terminal's scrollback history.
# #   - Hide
# #       Hide the Alacritty window.
# #   - Minimize
# #       Minimize the Alacritty window.
# #   - Quit
# #       Quit Alacritty.
# #   - ToggleFullscreen
# #   - SpawnNewInstance
# #       Spawn a new instance of Alacritty.
# #   - CreateNewWindow
# #       Create a new Alacritty window from the current process.
# #   - ClearLogNotice
# #       Clear Alacritty's UI warning and error notice.
# #   - ClearSelection
# #       Remove the active selection.
# #   - ReceiveChar
# #   - None
# #
# # - Vi mode exclusive actions:
# #
# #   - Open
# #       Perform the action of the first matching hint under the vi mode cursor
# #       with `mouse.enabled` set to `true`.
# #   - ToggleNormalSelection
# #   - ToggleLineSelection
# #   - ToggleBlockSelection
# #   - ToggleSemanticSelection
# #       Toggle semantic selection based on `selection.semantic_escape_chars`.
# #   - CenterAroundViCursor
# #       Center view around vi mode cursor
# #
# # - Vi mode exclusive cursor motion actions:
# #
# #   - Up
# #       One line up.
# #   - Down
# #       One line down.
# #   - Left
# #       One character left.
# #   - Right
# #       One character right.
# #   - First
# #       First column, or beginning of the line when already at the first column.
# #   - Last
# #       Last column, or beginning of the line when already at the last column.
# #   - FirstOccupied
# #       First non-empty cell in this terminal row, or first non-empty cell of
# #       the line when already at the first cell of the row.
# #   - High
# #       Top of the screen.
# #   - Middle
# #       Center of the screen.
# #   - Low
# #       Bottom of the screen.
# #   - SemanticLeft
# #       Start of the previous semantically separated word.
# #   - SemanticRight
# #       Start of the next semantically separated word.
# #   - SemanticLeftEnd
# #       End of the previous semantically separated word.
# #   - SemanticRightEnd
# #       End of the next semantically separated word.
# #   - WordLeft
# #       Start of the previous whitespace separated word.
# #   - WordRight
# #       Start of the next whitespace separated word.
# #   - WordLeftEnd
# #       End of the previous whitespace separated word.
# #   - WordRightEnd
# #       End of the next whitespace separated word.
# #   - Bracket
# #       Character matching the bracket at the cursor's location.
# #   - SearchNext
# #       Beginning of the next match.
# #   - SearchPrevious
# #       Beginning of the previous match.
# #   - SearchStart
# #       Start of the match to the left of the vi mode cursor.
# #   - SearchEnd
# #       End of the match to the right of the vi mode cursor.
# #
# # - Search mode exclusive actions:
# #   - SearchFocusNext
# #       Move the focus to the next search match.
# #   - SearchFocusPrevious
# #       Move the focus to the previous search match.
# #   - SearchConfirm
# #   - SearchCancel
# #   - SearchClear
# #       Reset the search regex.
# #   - SearchDeleteWord
# #       Delete the last word in the search regex.
# #   - SearchHistoryPrevious
# #       Go to the previous regex in the search history.
# #   - SearchHistoryNext
# #       Go to the next regex in the search history.
# #
# # - macOS exclusive actions:
# #   - ToggleSimpleFullscreen
# #       Enter fullscreen without occupying another space.
# #
# # - `command`: Fork and execute a specified command plus arguments
# #
# #    The `command` field must be a map containing a `program` string and an
# #    `args` array of command line parameter strings. For example:
# #       { program = "alacritty", args = ["-e", "vttest"] }
# #
# # And optionally:
# #
# # - `mods`: Key modifiers to filter binding actions
# #
# #    - Command
# #    - Control
# #    - Option
# #    - Super
# #    - Shift
# #    - Alt
# #
# #    Multiple `mods` can be combined using `|` like this:
# #       mods = "Control|Shift".
# #    Whitespace and capitalization are relevant and must match the example.
# #
# # - `mode`: Indicate a binding for only specific terminal reported modes
# #
# #    This is mainly used to send applications the correct escape sequences
# #    when in different modes.
# #
# #    - AppCursor
# #    - AppKeypad
# #    - Search
# #    - Alt
# #    - Vi
# #
# #    A `~` operator can be used before a mode to apply the binding whenever
# #    the mode is *not* active, e.g. `~Alt`.
# #
# # Bindings are always filled by default, but will be replaced when a new
# # binding with the same triggers is defined. To unset a default binding, it can
# # be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# # a no-op if you do not wish to receive input characters for that binding.
# #
# # If the same trigger is assigned to multiple actions, all of them are executed
# # in the order they were defined in.
#
# # Example key bindings (commented out):
# # [[key_bindings]]
# # key = "Paste"
# # action = "Paste"
#
# # [[key_bindings]]
# # key = "Copy"
# # action = "Copy"
#
# # [[key_bindings]]
# # key = "L"
# # mods = "Control"
# # action = "ClearLogNotice"
#
# # [[key_bindings]]
# # key = "L"
# # mods = "Control"
# # mode = "~Vi|~Search"
# # chars = "\x0c"
#
# # [[key_bindings]]
# # key = "PageUp"
# # mods = "Shift"
# # mode = "~Alt"
# # action = "ScrollPageUp"
#
# # [[key_bindings]]
# # key = "PageDown"
# # mods = "Shift"
# # mode = "~Alt"
# # action = "ScrollPageDown"
#
# # [[key_bindings]]
# # key = "Home"
# # mods = "Shift"
# # mode = "~Alt"
# # action = "ScrollToTop"
#
# # [[key_bindings]]
# # key = "End"
# # mods = "Shift"
# # mode = "~Alt"
# # action = "ScrollToBottom"
#
# Vi Mode
# [[keyboard.bindings]]
# key = "Space"
# mods = "Shift|Control"
# mode = "~Search"
# action = "ToggleViMode"
#
# [[keyboard.bindings]]
# key = "Space"
# mods = "Shift|Control"
# mode = "Vi|~Search"
# action = "ScrollToBottom"
#
# [[keyboard.bindings]]
# key = "Escape"
# mode = "Vi|~Search"
# action = "ClearSelection"
#
# [[keyboard.bindings]]
# key = "I"
# mode = "Vi|~Search"
# action = "ToggleViMode"
#
# [[keyboard.bindings]]
# key = "I"
# mode = "Vi|~Search"
# action = "ScrollToBottom"
#
# [[keyboard.bindings]]
# key = "C"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ToggleViMode"
#
# [[keyboard.bindings]]
# key = "Y"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ScrollLineUp"
#
# [[keyboard.bindings]]
# key = "E"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ScrollLineDown"
#
# [[keyboard.bindings]]
# key = "G"
# mode = "Vi|~Search"
# action = "ScrollToTop"
#
# [[keyboard.bindings]]
# key = "G"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "ScrollToBottom"
#
# [[keyboard.bindings]]
# key = "B"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ScrollPageUp"
#
# [[keyboard.bindings]]
# key = "F"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ScrollPageDown"
#
# [[keyboard.bindings]]
# key = "U"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ScrollHalfPageUp"
#
# [[keyboard.bindings]]
# key = "D"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ScrollHalfPageDown"
#
# [[keyboard.bindings]]
# key = "Y"
# mode = "Vi|~Search"
# action = "Copy"
#
# [[keyboard.bindings]]
# key = "Y"
# mode = "Vi|~Search"
# action = "ClearSelection"
#
# [[keyboard.bindings]]
# key = "Copy"
# mode = "Vi|~Search"
# action = "ClearSelection"
#
# [[keyboard.bindings]]
# key = "V"
# mode = "Vi|~Search"
# action = "ToggleNormalSelection"
#
# [[keyboard.bindings]]
# key = "V"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "ToggleLineSelection"
#
# [[keyboard.bindings]]
# key = "V"
# mods = "Control"
# mode = "Vi|~Search"
# action = "ToggleBlockSelection"
#
# [[keyboard.bindings]]
# key = "V"
# mods = "Alt"
# mode = "Vi|~Search"
# action = "ToggleSemanticSelection"
#
# [[keyboard.bindings]]
# key = "Return"
# mode = "Vi|~Search"
# action = "Open"
#
# [[keyboard.bindings]]
# key = "Z"
# mode = "Vi|~Search"
# action = "CenterAroundViCursor"
#
# [[keyboard.bindings]]
# key = "K"
# mode = "Vi|~Search"
# action = "Up"
#
# [[keyboard.bindings]]
# key = "J"
# mode = "Vi|~Search"
# action = "Down"
#
# [[keyboard.bindings]]
# key = "H"
# mode = "Vi|~Search"
# action = "Left"
#
# [[keyboard.bindings]]
# key = "L"
# mode = "Vi|~Search"
# action = "Right"
#
# [[keyboard.bindings]]
# key = "Up"
# mode = "Vi|~Search"
# action = "Up"
#
# [[keyboard.bindings]]
# key = "Down"
# mode = "Vi|~Search"
# action = "Down"
#
# [[keyboard.bindings]]
# key = "Left"
# mode = "Vi|~Search"
# action = "Left"
#
# [[keyboard.bindings]]
# key = "Right"
# mode = "Vi|~Search"
# action = "Right"
#
# [[keyboard.bindings]]
# key = "Key0"
# mode = "Vi|~Search"
# action = "First"
#
# [[keyboard.bindings]]
# key = "Key4"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "Last"
#
# [[keyboard.bindings]]
# key = "Key6"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "FirstOccupied"
#
# [[keyboard.bindings]]
# key = "H"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "High"
#
# [[keyboard.bindings]]
# key = "M"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "Middle"
#
# [[keyboard.bindings]]
# key = "L"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "Low"
#
# [[keyboard.bindings]]
# key = "B"
# mode = "Vi|~Search"
# action = "SemanticLeft"
#
# [[keyboard.bindings]]
# key = "W"
# mode = "Vi|~Search"
# action = "SemanticRight"
#
# [[keyboard.bindings]]
# key = "E"
# mode = "Vi|~Search"
# action = "SemanticRightEnd"
#
# [[keyboard.bindings]]
# key = "B"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "WordLeft"
#
# [[keyboard.bindings]]
# key = "W"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "WordRight"
#
# [[keyboard.bindings]]
# key = "E"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "WordRightEnd"
#
# [[keyboard.bindings]]
# key = "Key5"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "Bracket"
#
# [[keyboard.bindings]]
# key = "Slash"
# mode = "Vi|~Search"
# action = "SearchForward"
#
# [[keyboard.bindings]]
# key = "Slash"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "SearchBackward"
#
# [[keyboard.bindings]]
# key = "N"
# mode = "Vi|~Search"
# action = "SearchNext"
#
# [[keyboard.bindings]]
# key = "N"
# mods = "Shift"
# mode = "Vi|~Search"
# action = "SearchPrevious"
#
# # Search Mode
# [[keyboard.bindings]]
# key = "Return"
# mode = "Search|Vi"
# action = "SearchConfirm"
#
# [[keyboard.bindings]]
# key = "Escape"
# mode = "Search"
# action = "SearchCancel"
#
# [[keyboard.bindings]]
# key = "C"
# mods = "Control"
# mode = "Search"
# action = "SearchCancel"
#
# [[keyboard.bindings]]
# key = "U"
# mods = "Control"
# mode = "Search"
# action = "SearchClear"
#
# [[keyboard.bindings]]
# key = "W"
# mods = "Control"
# mode = "Search"
# action = "SearchDeleteWord"
#
# [[keyboard.bindings]]
# key = "P"
# mods = "Control"
# mode = "Search"
# action = "SearchHistoryPrevious"
#
# [[keyboard.bindings]]
# key = "N"
# mods = "Control"
# mode = "Search"
# action = "SearchHistoryNext"
#
# [[keyboard.bindings]]
# key = "Up"
# mode = "Search"
# action = "SearchHistoryPrevious"
#
# [[keyboard.bindings]]
# key = "Down"
# mode = "Search"
# action = "SearchHistoryNext"
#
# [[keyboard.bindings]]
# key = "Return"
# mode = "Search|~Vi"
# action = "SearchFocusNext"
#
# [[keyboard.bindings]]
# key = "Return"
# mods = "Shift"
# mode = "Search|~Vi"
# action = "SearchFocusPrevious"
#
# # (macOS only)
# # [[keyboard.bindings]]
# # chars = "\x0c"
# # key = "K"
# # mods = "Command"
# # mode = "~Vi|~Search"
#
# [[keyboard.bindings]]
# key = "K"
# mods = "Command"
# mode = "~Vi|~Search"
# action = "ClearHistory"
#
# [[keyboard.bindings]]
# key = "Key0"
# mods = "Command"
# action = "ResetFontSize"
#
# [[keyboard.bindings]]
# key = "Equals"
# mods = "Command"
# action = "IncreaseFontSize"
#
# [[keyboard.bindings]]
# key = "Plus"
# mods = "Command"
# action = "IncreaseFontSize"
#
# [[keyboard.bindings]]
# key = "NumpadAdd"
# mods = "Command"
# action = "IncreaseFontSize"
#
# [[keyboard.bindings]]
# key = "Minus"
# mods = "Command"
# action = "DecreaseFontSize"
#
# [[keyboard.bindings]]
# key = "NumpadSubtract"
# mods = "Command"
# action = "DecreaseFontSize"
#
# [[keyboard.bindings]]
# key = "V"
# mods = "Command"
# action = "Paste"
#
# [[keyboard.bindings]]
# key = "C"
# mods = "Command"
# action = "Copy"
#
# [[keyboard.bindings]]
# key = "C"
# mods = "Command"
# mode = "Vi|~Search"
# action = "ClearSelection"
#
# [[keyboard.bindings]]
# key = "H"
# mods = "Command"
# action = "Hide"
#
# [[keyboard.bindings]]
# key = "H"
# mods = "Command|Alt"
# action = "HideOtherApplications"
#
# [[keyboard.bindings]]
# key = "M"
# mods = "Command"
# action = "Minimize"
#
# [[keyboard.bindings]]
# key = "Q"
# mods = "Command"
# action = "Quit"
#
# [[keyboard.bindings]]
# key = "W"
# mods = "Command"
# action = "Quit"
#
# [[keyboard.bindings]]
# key = "N"
# mods = "Command"
# action = "SpawnNewInstance"
#
# [[keyboard.bindings]]
# key = "F"
# mods = "Command|Control"
# action = "ToggleFullscreen"
#
# [[keyboard.bindings]]
# key = "F"
# mods = "Command"
# mode = "~Search"
# action = "SearchForward"
#
# [[keyboard.bindings]]
# key = "B"
# mods = "Command"
# mode = "~Search"
# action = "SearchBackward"
